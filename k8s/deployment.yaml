apiVersion: v1
kind: Namespace
metadata:
  name: auth-service
---
apiVersion: v1
kind: Secret
metadata:
  name: auth-secrets
  namespace: auth-service
type: Opaque
stringData:
  POSTGRES_PASSWORD: "change-me-postgres-password"
  SECRET_KEY: "change-me-secret-key"
  VAULT_TOKEN: "change-me-vault-token"
  KEYCLOAK_CLIENT_SECRET: "change-me-keycloak-secret"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-config
  namespace: auth-service
data:
  POSTGRES_DB: "authdb"
  POSTGRES_USER: "authuser"
  VAULT_URL: "http://vault-service:8200"
  VAULT_MOUNT_POINT: "secret"
  VAULT_PATH_PREFIX: "auth-tokens"
  REDIS_URL: "redis://redis-service:6379"
  KEYCLOAK_URL: "http://keycloak.keycloak.svc.cluster.local"
  KEYCLOAK_REALM: "ashid-sales-de"
  KEYCLOAK_CLIENT_ID: "api-gateway"
  API_V1_PREFIX: "/api/v1"
  PROJECT_NAME: "Ashid Auth Service"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: auth-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      containers:
      - name: auth-service
        image: ashid-auth-service:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
        envFrom:
        - configMapRef:
            name: auth-config
        - secretRef:
            name: auth-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: auth-service
spec:
  selector:
    app: auth-service
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-service-ingress
  namespace: auth-service
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - auth.ashid-sales-de.com
    secretName: auth-service-tls
  rules:
  - host: auth.ashid-sales-de.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80
